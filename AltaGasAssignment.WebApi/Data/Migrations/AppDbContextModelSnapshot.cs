// <auto-generated />
using System;
using AltaGasAssignment.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AltaGasAssignment.WebApi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TimeZoneStr")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.EquipmentEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentEventTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TripId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EquipmentEventTypeId");

                    b.HasIndex("TripId");

                    b.ToTable("EquipmentEvents");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.EquipmentEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EquipmentEventTypes");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.FileUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FileUploadType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DestinationCityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OriginCityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTripMinutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCityId");

                    b.HasIndex("EndDate");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OriginCityId");

                    b.HasIndex("StartDate");

                    b.HasIndex("TotalTripMinutes");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.EquipmentEvent", b =>
                {
                    b.HasOne("AltaGasAssignment.WebApi.Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AltaGasAssignment.WebApi.Data.Entities.EquipmentEventType", "EquipmentEventType")
                        .WithMany()
                        .HasForeignKey("EquipmentEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AltaGasAssignment.WebApi.Data.Entities.Trip", "Trip")
                        .WithMany("EquipmentEvents")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("EquipmentEventType");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.Trip", b =>
                {
                    b.HasOne("AltaGasAssignment.WebApi.Data.Entities.City", "DestinationCity")
                        .WithMany()
                        .HasForeignKey("DestinationCityId");

                    b.HasOne("AltaGasAssignment.WebApi.Data.Entities.City", "OriginCity")
                        .WithMany()
                        .HasForeignKey("OriginCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationCity");

                    b.Navigation("OriginCity");
                });

            modelBuilder.Entity("AltaGasAssignment.WebApi.Data.Entities.Trip", b =>
                {
                    b.Navigation("EquipmentEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
